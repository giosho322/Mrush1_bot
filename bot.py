import logging
import re
import asyncio
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from flask import Flask
from dotenv import load_dotenv

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –¥–ª—è Railway
app = Flask(__name__)

@app.route('/')
def health_check():
    return "Mrush1 Bot is running", 200

def run_flask():
    app.run(host='0.0.0.0', port=int(os.getenv("PORT", 8000)), debug=False, use_reloader=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN") or os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID", "644710593")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@shop_mrush1")

START_HOUR = 8
END_HOUR = 23
FORBIDDEN_WORDS = {'—Å—É–∫–∞', '–±–ª—è—Ç—å', '–ø–∏–∑–¥–µ—Ü', '—Ö—É–π', '–µ–±–∞—Ç—å'}
ALLOWED_IMAGE_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif'}
user_posts = {}

MAIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üÜò –ü–æ–º–æ—â—å")],
        [KeyboardButton("üë®‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")],
        [KeyboardButton("üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

BACK_BUTTON = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
    resize_keyboard=True
)

def is_within_working_hours() -> bool:
    now = datetime.now().hour
    return START_HOUR <= now < END_HOUR

async def check_subscription_and_block(context: ContextTypes, user_id: int) -> tuple[bool, str]:
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status == 'kicked':
            return False, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        return member.status in ['member', 'administrator', 'creator'], ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def check_post_limit_and_duplicates(user_id: int, text: str) -> tuple[bool, str]:
    now = datetime.now()
    if user_id not in user_posts:
        user_posts[user_id] = {"posts": [], "count": 0, "date": now}
        return True, ""

    user_data = user_posts[user_id]
    if now.date() != user_data["date"].date():
        user_posts[user_id] = {"posts": [], "count": 0, "date": now}

    if user_data["count"] >= 3:
        return False, "‚ùå –õ–∏–º–∏—Ç 3 –ø–æ—Å—Ç–∞ –≤ —Å—É—Ç–∫–∏!"

    for post, post_time in user_data["posts"]:
        if post.strip() == text.strip() and (now - post_time) < timedelta(days=1):
            hours_left = 24 - (now - post_time).total_seconds() // 3600
            return False, f"‚ùå –ü–æ—Å—Ç —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {int(hours_left)} —á."

    return True, ""

def add_successful_post(user_id: int, text: str):
    now = datetime.now()
    user_data = user_posts[user_id]
    user_data["posts"].append([text, now])
    user_data["count"] += 1
    user_data["date"] = now

def check_message(text: str, user_username: str) -> tuple[bool, str]:
    text_lower = text.lower()
    user_username = user_username.lower() if user_username else ""
    is_offtopic = any(hashtag in text_lower for hashtag in ['#–æ—Ñ—Ç–æ–ø', '#–æ—Ñ—Ñ—Ç–æ–ø'])
    usernames = re.findall(r'@([a-zA-Z0-9_]{5,})', text)

    if not usernames:
        return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ @username –¥–ª—è —Å–≤—è–∑–∏"
    
    if not is_offtopic:
        actions = ['–ø—Ä–æ–¥–∞–º', '–æ–±–º–µ–Ω', '–∫—É–ø–ª—é', '–ø—Ä–æ–¥–∞—é', '–æ–±–º–µ–Ω—è—é']
        if not any(action in text_lower for action in actions):
            return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ: '–ø—Ä–æ–¥–∞–º', '–æ–±–º–µ–Ω' –∏–ª–∏ '–∫—É–ø–ª—é'"

        mail_keywords = ['–ø–æ—á—Ç–∞', '—É—Ç–µ—Ä—è', '–æ–∫–∏', '–æ–∫.—Ä—É', '–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏']
        if not any(keyword in text_lower for keyword in mail_keywords):
            return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∫–∞—Ö"

    if sum(c.isupper() for c in text) / len(text) > 0.7:
        return False, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞–ø—Å–∞"

    if any(word in text_lower for word in FORBIDDEN_WORDS):
        return False, "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç"

    if re.search(r'(https?://|www\.|\.com|\.ru|t\.me/[a-zA-Z0-9_]+)', text) and not re.search(r't\.me/shop_mrush1', text):
        return False, "‚ùå –°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã (–∫—Ä–æ–º–µ t.me/shop_mrush1)"

    if re.search(r'@[a-zA-Z0-9_]*bot\b', text_lower):
        return False, "‚ùå –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω—ã"

    for username in usernames:
        if not username.lower().endswith("bot") and username.lower() not in [user_username, 'vardges_grigoryan']:
            return False, f"‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (@–≤–∞—à_–Ω–∏–∫)"

    return True, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"

def check_file_extension(file_name: str) -> bool:
    return file_name and any(file_name.lower().endswith(ext) for ext in ALLOWED_IMAGE_EXTENSIONS)

async def start(update: Update, context: ContextTypes):
    if not is_within_working_hours():
        await update.message.reply_text("‚è∞ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 8:00 –¥–æ 23:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    greeting = (
        "ü§ñ *–ü—Ä–∏–≤–µ—Ç, —è Mrush1* ‚Äî –±–æ—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n\n"
        "üìå –ü—Ä–∞–≤–∏–ª–∞:\n"
        "üîó [–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã](https://t.me/shop_mrush1/11)\n"
        "üîó [–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É](https://t.me/shop_mrush1/13)\n\n"
        "üì∏ *–ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:*"
    )

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=greeting,
        parse_mode="Markdown",
        reply_markup=MAIN_MENU
    )
    
    try:
        with open("primerbot.jpg", "rb") as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption="–ü—Ä–æ–¥–∞–º –∑–∞ 100‚ÇΩ\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: @vardges_grigoryan"
            )
    except FileNotFoundError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä")

async def contact_admin(update: Update, context: ContextTypes):
    await update.message.reply_text(
        "üë®‚Äçüíª –í–æ–ø—Ä–æ—Å—ã –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @vardges_grigoryan",
        reply_markup=BACK_BUTTON
    )

async def show_help(update: Update, context: ContextTypes):
    help_text = (
        "üìå –ö–∞–∫ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
        "1. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @shop_mrush1\n"
        "2. –ù–∞–∂–º–∏ /start\n"
        "3. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n"
        "‚ö† –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "- –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ø—Ä–æ–¥–∞–º/–∫—É–ø–ª—é/–æ–±–º–µ–Ω)\n"
        "- –¶–µ–Ω–∞/–±—é–¥–∂–µ—Ç\n"
        "- –ò–Ω—Ñ–æ –æ –ø—Ä–∏–≤—è–∑–∫–∞—Ö\n"
        "- –í–∞—à @username\n"
        "- –ë–µ–∑ –º–∞—Ç–∞/–∫–∞–ø—Å–∞/—Å—Å—ã–ª–æ–∫"
    )
    await update.message.reply_text(help_text, reply_markup=BACK_BUTTON)

async def handle_post(update: Update, context: ContextTypes):
    user_id = update.message.from_user.id
    text = update.message.text or update.message.caption or ""
    user_username = update.message.from_user.username

    subscription_ok, sub_msg = await check_subscription_and_block(context, user_id)
    if not subscription_ok:
        await update.message.reply_text(
            f"{sub_msg or f'‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {CHANNEL_ID}!'}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ])
        )
        return

    limit_ok, limit_msg = check_post_limit_and_duplicates(user_id, text)
    if not limit_ok:
        await update.message.reply_text(limit_msg, reply_markup=MAIN_MENU)
        return

    content_ok, content_msg = check_message(text, user_username)
    if not content_ok:
        await update.message.reply_text(content_msg, reply_markup=MAIN_MENU)
        return

    try:
        if update.message.photo:
            await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=update.message.photo[-1].file_id,
                caption=text
            )
        elif update.message.document and check_file_extension(update.message.document.file_name):
            await context.bot.send_document(
                chat_id=CHANNEL_ID,
                document=update.message.document.file_id,
                caption=text
            )
        else:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=text)

        add_successful_post(user_id, text)
        await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=MAIN_MENU)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", reply_markup=MAIN_MENU)

async def handle_message(update: Update, context: ContextTypes):
    text = update.message.text
    if text == "üë®‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
        await contact_admin(update, context)
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await show_help(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU)
    elif text == "üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
        await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=BACK_BUTTON)
        context.user_data['awaiting_post'] = True
    elif context.user_data.get('awaiting_post', False):
        await handle_post(update, context)
        context.user_data['awaiting_post'] = False
    else:
        await update.message.reply_text("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=MAIN_MENU)

async def callback_query_handler(update: Update, context: ContextTypes):
    query = update.callback_query
    await query.answer()
    if query.data == "check_subscription":
        user_id = query.from_user.id
        subscription_ok, sub_msg = await check_subscription_and_block(context, user_id)
        if subscription_ok:
            await query.edit_message_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
        else:
            await query.edit_message_text(
                f"‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @shop_mrush1\n{sub_msg or ''}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")]
                ])
            )

async def error_handler(update: Update, context: ContextTypes):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

async def run_bot():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.IMAGE, handle_message))
    application.add_error_handler(error_handler)

    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        await asyncio.sleep(3600)

def main():
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(run_bot())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        loop.close()

if __name__ == '__main__':
    import threading
    main()
