import logging
import re
import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes, CallbackQueryHandler
)
import os
from dotenv import load_dotenv

# === –õ–û–ì–ò ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ó–ê–ì–†–£–ó–ö–ê ENV ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID", "644710593")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@shop_mrush1")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
START_HOUR = 8
END_HOUR = 23
FORBIDDEN_WORDS = {'—Å—É–∫–∞', '–±–ª—è—Ç—å', '–ø–∏–∑–¥–µ—Ü', '—Ö—É–π', '–µ–±–∞—Ç—å'}
ALLOWED_IMAGE_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif'}
user_posts = {}

# === –ö–ù–û–ü–ö–ò ===
MAIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üÜò –ü–æ–º–æ—â—å")],
        [KeyboardButton("üë®‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")],
        [KeyboardButton("üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)
BACK_BUTTON = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
    resize_keyboard=True
)

# === –•–ï–õ–ü–ï–†–´ ===
def is_within_working_hours() -> bool:
    now = datetime.now(ZoneInfo("Europe/Moscow")).hour
    return START_HOUR <= now < END_HOUR

async def check_subscription_and_block(context: ContextTypes, user_id: int) -> tuple[bool, str]:
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status == 'kicked':
            return False, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        return member.status in ['member', 'administrator', 'creator'], ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."

def check_post_limit_and_duplicates(user_id: int, text: str) -> tuple[bool, str]:
    now = datetime.now()
    if user_id not in user_posts:
        user_posts[user_id] = {"posts": [], "count": 0, "date": now}
        return True, ""

    data = user_posts[user_id]
    if now.date() != data["date"].date():
        user_posts[user_id] = {"posts": [], "count": 0, "date": now}

    if data["count"] >= 3:
        return False, "‚ùå –õ–∏–º–∏—Ç –≤ 3 –ø–æ—Å—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."

    for post, t in data["posts"]:
        if post.strip() == text.strip():
            diff = now - t
            if diff < timedelta(days=1):
                left = 24 - diff.total_seconds() // 3600
                return False, f"‚ùå –¢–∞–∫–æ–π –ø–æ—Å—Ç —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {int(left)} —á."

    return True, ""

def add_successful_post(user_id: int, text: str):
    now = datetime.now()
    data = user_posts[user_id]
    data["posts"].append([text, now])
    data["count"] += 1
    data["date"] = now

def check_message(text: str, user_username: str) -> tuple[bool, str]:
    text_lower = text.lower()
    user_username = user_username.lower() if user_username else ""
    is_offtopic = any(tag in text_lower for tag in ['#–æ—Ñ—Ç–æ–ø', '#–æ—Ñ—Ñ—Ç–æ–ø'])

    usernames = re.findall(r'@([a-zA-Z0-9_]{5,})', text)
    if not usernames:
        return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π Telegram @username."

    if not is_offtopic:
        actions = ['–ø—Ä–æ–¥–∞–º', '–æ–±–º–µ–Ω', '–∫—É–ø–ª—é', '–ø—Ä–æ–¥–∞—é', '–æ–±–º–µ–Ω—è—é']
        if not any(act in text_lower for act in actions):
            return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å: '–ø—Ä–æ–¥–∞–º', '–∫—É–ø–ª—é' –∏–ª–∏ '–æ–±–º–µ–Ω'."
        keywords = ['–ø–æ—á—Ç–∞', '—É—Ç–µ—Ä', '–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å']
        if not any(word in text_lower for word in keywords):
            return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—á—Ç–µ (–µ—Å—Ç—å/—É—Ç–µ—Ä—è–Ω–∞/–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å)."

    if len(text) > 10 and sum(c.isupper() for c in text) / len(text) > 0.7:
        return False, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ö–ê–ü–°–ê."

    if any(word in text_lower for word in FORBIDDEN_WORDS):
        return False, "‚ùå –£–±–µ—Ä–∏—Ç–µ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É."

    if re.search(r'(https?://|\.com|\.ru|\.org)', text) and 't.me/shop_mrush1' not in text:
        return False, "‚ùå –°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã (–∫—Ä–æ–º–µ t.me/shop_mrush1)."

    for username in usernames:
        uname = username.lower()
        if uname.endswith("bot"):
            continue
        if uname not in [user_username, 'vardges_grigoryan']:
            return False, f"‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram (@–≤–∞—à_–Ω–∏–∫), –∞ –Ω–µ @{username}."

    return True, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."

def check_file_extension(filename: str) -> bool:
    return filename and any(filename.lower().endswith(ext) for ext in ALLOWED_IMAGE_EXTENSIONS)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_within_working_hours():
        await update.message.reply_text("‚è∞ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 8:00 –¥–æ 23:00.")
        return
    await send_welcome_message(context, update.effective_chat.id)

async def send_welcome_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    greeting = (
        "ü§ñ *–ü—Ä–∏–≤–µ—Ç, —è Mrush1* ‚Äî –±–æ—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ *–ø—Ä–æ–¥–∞–∂–µ/–ø–æ–∫—É–ø–∫–µ/–æ–±–º–µ–Ω–µ* –∏–≥—Ä–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!\n\n"
        "üìå –ü—Ä–∞–≤–∏–ª–∞:\n"
        "üîó [–ü—Ä–∞–≤–∏–ª–∞](https://t.me/shop_mrush1/11)\n"
        "üîó [–ü—Ä–∏–º–µ—Ä –∑–∞—è–≤–∫–∏](https://t.me/shop_mrush1/13)\n\n"
        "üì∏ –ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:"
    )
    await context.bot.send_message(chat_id=chat_id, text=greeting, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=MAIN_MENU)
    try:
        with open("primerbot.jpg", "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption="–ü—Ä–æ–¥–∞–º –∑–∞ 100‚ÇΩ –∏–ª–∏ –æ–±–º–µ–Ω—è—é. –ü–æ—á—Ç–∞ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é. –ö–æ–Ω—Ç–∞–∫—Ç: @vardges_grigoryan"
            )
    except FileNotFoundError:
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë®‚Äçüíª –ü–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @vardges_grigoryan", reply_markup=BACK_BUTTON)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìå –ö–∞–∫ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
        "- –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @shop_mrush1\n"
        "- –ù–∞–∂–º–∏—Ç–µ /start\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç + –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Ñ–æ—Ç–æ)\n\n"
        "‚ö† –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "- –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å (–ø—Ä–æ–¥–∞–º/–∫—É–ø–ª—é/–æ–±–º–µ–Ω) –∏–ª–∏ #–æ—Ñ—Ñ—Ç–æ–ø\n"
        "- –¶–µ–Ω–∞ –∏–ª–∏ –±—é–¥–∂–µ—Ç\n"
        "- –ò–Ω—Ñ–æ –æ –ø–æ—á—Ç–µ\n"
        "- –ë–µ–∑ –º–∞—Ç–∞, –∫–∞–ø—Å–∞, —Å—Å—ã–ª–æ–∫ –∏ –±–æ—Ç–æ–≤\n"
        "- –£–∫–∞–∂–∏—Ç–µ –≤–∞—à @username"
    )
    await update.message.reply_text(help_text, reply_markup=BACK_BUTTON)

async def handle_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_username = update.message.from_user.username
    text = update.message.caption or update.message.text or ""
    photos = update.message.photo
    doc = update.message.document

    if not is_within_working_hours():
        await update.message.reply_text("‚è∞ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 8:00 –¥–æ 23:00.")
        return

    sub_ok, sub_msg = await check_subscription_and_block(context, user_id)
    if not sub_ok:
        await update.message.reply_text(
            f"{sub_msg}\n–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]])
        )
        return

    ok, msg = check_post_limit_and_duplicates(user_id, text)
    if not ok:
        await update.message.reply_text(msg, reply_markup=MAIN_MENU)
        return

    valid, reason = check_message(text, user_username)
    if not valid:
        await update.message.reply_text(reason, reply_markup=MAIN_MENU)
        return

    try:
        if photos:
            await context.bot.send_photo(chat_id=CHANNEL_ID, photo=photos[-1].file_id, caption=text)
        elif doc and check_file_extension(doc.file_name):
            await context.bot.send_document(chat_id=CHANNEL_ID, document=doc.file_id, caption=text)
        else:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
        add_successful_post(user_id, text)
        await update.message.reply_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=MAIN_MENU)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    if msg == "üë®‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
        await contact_admin(update, context)
    elif msg == "üÜò –ü–æ–º–æ—â—å":
        await show_help(update, context)
    elif msg == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU)
    elif msg == "üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
        await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è + —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", reply_markup=BACK_BUTTON)
        context.user_data["awaiting_post"] = True
    elif context.user_data.get("awaiting_post"):
        await handle_post(update, context)
        context.user_data["awaiting_post"] = False
    else:
        await update.message.reply_text("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=MAIN_MENU)

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "check_subscription":
        user_id = query.from_user.id
        sub_ok, sub_msg = await check_subscription_and_block(context, user_id)
        if sub_ok:
            await query.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        else:
            await query.edit_message_text(
                f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n{sub_msg}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")]])
            )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# === –ì–õ–ê–í–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê ===
async def run_bot():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.IMAGE, handle_message))
    application.add_error_handler(error_handler)
    await application.bot.delete_webhook(drop_pending_updates=True)
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(run_bot())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
