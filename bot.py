import logging
import re
import os
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes, CallbackQueryHandler
)
from dotenv import load_dotenv

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID", "644710593")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@shop_mrush1")

if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
START_HOUR = 8
END_HOUR = 23
FORBIDDEN_WORDS = {'—Å—É–∫–∞', '–±–ª—è—Ç—å', '–ø–∏–∑–¥–µ—Ü', '—Ö—É–π', '–µ–±–∞—Ç—å'}
ALLOWED_IMAGE_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif'}
user_posts = {}

# –ú–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup(
    [[KeyboardButton("üÜò –ü–æ–º–æ—â—å"),
      KeyboardButton("üë®‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"),
      KeyboardButton("üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")]],
    resize_keyboard=True
)

BACK_BUTTON = ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]], resize_keyboard=True)

def is_within_hours() -> bool:
    return START_HOUR <= datetime.now(ZoneInfo("Europe/Moscow")).hour < END_HOUR

def contains_forbidden_words(text: str) -> bool:
    return any(bad_word in text.lower() for bad_word in FORBIDDEN_WORDS)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=MAIN_MENU
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text if update.message.text else ""
    photo = update.message.photo
    document = update.message.document

    if text == "üÜò –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
            "üì§ –ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'.\n"
            "üë®‚Äçüíª –î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚Äî –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n\n"
            "‚ùó –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–ø–∞–º, –º–∞—Ç –∏–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
            parse_mode='HTML',
            reply_markup=BACK_BUTTON
        )
        return

    if text == "üë®‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
        await update.message.reply_text(
            "üì® <b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º:</b> @scuf77",
            parse_mode='HTML',
            reply_markup=BACK_BUTTON
        )
        return

    if text == "üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
        user_posts[user_id] = {"text": "", "photo": None}
        await update.message.reply_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ.\n\n"
            "–ö–æ–≥–¥–∞ –≤—ã –≤—Å—ë –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ, —è –ø–æ–∫–∞–∂—É –≤–∞–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=BACK_BUTTON
        )
        return

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU)
        return

    # –°–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if user_id in user_posts:
        if contains_forbidden_words(text):
            await update.message.reply_text("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ—Ä–∏—Ç–µ –µ—ë.")
            return

        if photo:
            user_posts[user_id]["photo"] = photo[-1].file_id
        elif document and any(document.file_name.lower().endswith(ext) for ext in ALLOWED_IMAGE_EXTENSIONS):
            user_posts[user_id]["photo"] = document.file_id

        if text:
            user_posts[user_id]["text"] += f"{text}\n"

        preview_text = user_posts[user_id]["text"].strip()
        buttons = [
            [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        if user_posts[user_id]["photo"]:
            await update.message.reply_photo(user_posts[user_id]["photo"], caption=preview_text or "üì∏ –§–æ—Ç–æ", reply_markup=reply_markup)
        else:
            await update.message.reply_text(preview_text or "üì§ –ü—É—Å—Ç–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", reply_markup=reply_markup)
        return

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "confirm":
        if user_id not in user_posts:
            await query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        post = user_posts.pop(user_id)
        try:
            if post["photo"]:
                await context.bot.send_photo(CHANNEL_ID, post["photo"], caption=post["text"])
            else:
                await context.bot.send_message(CHANNEL_ID, post["text"])
            await query.message.edit_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif query.data == "cancel":
        user_posts.pop(user_id, None)
        await query.message.edit_text("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.warning(f"–û—à–∏–±–∫–∞: {context.error}")

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.IMAGE, handle_message))
    app.add_handler(CallbackQueryHandler(callback_query_handler))
    app.add_error_handler(error_handler)
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
